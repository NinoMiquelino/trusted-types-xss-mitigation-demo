/**
 * L√≥gica JavaScript para demonstrar o Trusted Types e DOMPurify.
 * Este script deve ser carregado ap√≥s DOMPurify.
 */

// Elementos DOM
const outputArea = document.getElementById('output-area');
const outputConsole = document.getElementById('output-console');
const btnErro = document.getElementById('btn-erro');
const btnCorreto = document.getElementById('btn-correto');

// Payload que simula um ataque XSS (injeta uma tag <img> com um script de erro).
// O 'src=x' √© intencionalmente inv√°lido para garantir que o 'onerror' seja acionado se a defesa falhar.
const MALICIOUS_PAYLOAD = `<h1>Ataque XSS:</h1><img src=x style="border: 1px dashed red; width: 100px; height: 30px; display: block; margin-bottom: 10px;" onerror="log('XSS INJETADO! Se esta mensagem aparecer no console do browser, a prote√ß√£o falhou.', 'error'); alert('XSS Ativado!')">` + 
                          `<p class="mt-2 text-red-500 font-bold">O c√≥digo malicioso est√° no atributo 'onerror'.</p>`;


/**
 * Fun√ß√£o para registrar mensagens no console da aplica√ß√£o.
 * @param {string} message - A mensagem a ser logada.
 * @param {string} type - O tipo de mensagem ('info', 'error', 'success').
 */
const log = (message, type = 'info') => {
    const now = new Date().toLocaleTimeString('pt-BR');
    let colorClass = 'text-gray-300';
    if (type === 'error') colorClass = 'text-red-400';
    if (type === 'success') colorClass = 'text-green-400';

    // Cria o novo log e adiciona ao topo
    const newLogEntry = `<span class="${colorClass}">[${now} - ${type.toUpperCase()}]</span> ${message}`;
    // Usamos innerHTML para adicionar cores, mas DOMPurify.sanitize √© desnecess√°rio aqui por ser console de debug.
    outputConsole.innerHTML = newLogEntry + '\n' + outputConsole.innerHTML;
};

/**
 * Configura e cria a pol√≠tica Trusted Types.
 * @returns {TrustedTypePolicy | null} A pol√≠tica criada ou null se indispon√≠vel.
 */
const setupTrustedTypes = () => {
    if (typeof trustedTypes === 'undefined') {
        log("Trusted Types API INDISPON√çVEL. Verifique se o navegador suporta e se o CSP est√° ativo.", 'error');
        btnErro.disabled = true;
        btnCorreto.disabled = true;
        return null;
    }
    
    log("Trusted Types API detectada. Criando pol√≠tica 'securePolicy'...", 'info');
    
    // ----------------------------------------------------
    // CRIA√á√ÉO DA POL√çTICA
    // ----------------------------------------------------
    const policy = trustedTypes.createPolicy("securePolicy", {  
        
        // 1. Tratamento para createHTML (Sanitiza√ß√£o)
        createHTML: (input) => {
            log(`Policy: createHTML chamado. Sanitizando HTML usando DOMPurify...`, 'info');
            // DOMPurify remove todos os atributos perigosos (como 'onerror')
            const cleanHtml = DOMPurify.sanitize(input, { SAFE_FOR_TEMPLATES: true, FORCE_BODY: true });
            
            // O retorno desta string ser√° automaticamente embrulhado em TrustedHTML
            return cleanHtml;
        },
        
        // 2. Tratamento para createScript (Valida√ß√£o manual, como no seu exemplo)
        createScript: (input) => {
            if (input.includes("eval(") || input.includes("document.write")) {
                log(`Policy: createScript bloqueado: Fun√ß√£o JS perigosa ('eval' ou 'document.write') detectada!`, 'error');
                throw new Error("Script n√£o confi√°vel: Uso de fun√ß√£o perigosa detectado.");
            }   
            log("Policy: createScript aprovado. Retornando script confi√°vel.", 'success');
            return input;
        },
    });
    
    log("Pol√≠tica 'securePolicy' criada com sucesso. innerHTML s√≥ aceitar√° TrustedHTML/TrustedScript.", 'success');
    return policy;
};

// Inicializa a pol√≠tica
const trustedPolicy = setupTrustedTypes();


// ==============================================================
// DEMONSTRA√á√ÉO 1: ERRO (innerHTML direto)
// ==============================================================
btnErro.addEventListener('click', () => {
    outputArea.innerHTML = '<p class="text-gray-500 italic">Tentando injetar HTML...</p>';
    log("--- Tentativa de ERRO ---", 'info');
    log("Tentando atribuir payload MALICIOSO diretamente via innerHTML...", 'info');

    try {
        // *** ESTA LINHA VAI PROVOCAR O TypeError ***
        // Se o CSP estiver ativo, o navegador lan√ßa um erro, impedindo a inje√ß√£o.
        outputArea.innerHTML = MALICIOUS_PAYLOAD;

        // Se esta linha for alcan√ßada, o Trusted Types N√ÉO EST√Å ATIVO no ambiente
        log("ATEN√á√ÉO: innerHTML foi executado com sucesso. Trusted Types n√£o est√° ativo. (Vulner√°vel)", 'error');
        outputArea.innerHTML = MALICIOUS_PAYLOAD; // Renderiza o XSS para fins de demonstra√ß√£o visual se o TT estiver inativo.

    } catch (error) {
        // Bloco executado quando o Trusted Types est√° ativo e bloqueia a string simples.
        log(`BLOQUEIO BEM-SUCEDIDO: ${error.name} - ${error.message}`, 'error');
        outputArea.innerHTML = `<p class="text-red-600 font-bold mt-2">üõ°Ô∏è BLOQUEADO! O Trusted Types impediu a atribui√ß√£o insegura ao innerHTML.</p>`;
    }
});

// ==============================================================
// DEMONSTRA√á√ÉO 2: CORRETO (Uso da Pol√≠tica com Sanitiza√ß√£o)
// ==============================================================
btnCorreto.addEventListener('click', () => {
    outputArea.innerHTML = '<p class="text-gray-500 italic">Tentando injetar HTML seguro...</p>';
    log("--- Tentativa CORRETA ---", 'info');
    log("Injetando payload MALICIOSO, mas utilizando a pol√≠tica 'createHTML'...", 'info');

    try {
        // 1. Chamamos a pol√≠tica para transformar a string insegura em TrustedHTML.
        // A fun√ß√£o createHTML sanitiza (remove o 'onerror') e retorna uma string limpa.
        const safeHTML = trustedPolicy.createHTML(MALICIOUS_PAYLOAD);

        // 2. Atribu√≠mos o objeto TrustedHTML ao innerHTML.
        // O Trusted Types permite esta opera√ß√£o, pois a origem do HTML √© confi√°vel (a pol√≠tica).
        outputArea.innerHTML = safeHTML;
        
        // Remove a mensagem XSS, mas mant√©m o visual do HTML limpo
        log("Atribui√ß√£o de innerHTML realizada com sucesso. O HTML foi sanitizado e o c√≥digo XSS foi removido.", 'success');
        outputArea.classList.add('bg-green-50', 'p-2', 'rounded');

    } catch (error) {
        log(`Erro ao executar a pol√≠tica (Estrutural): ${error.message}`, 'error');
    }
});